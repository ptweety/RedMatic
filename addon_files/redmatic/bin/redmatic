#!/bin/sh

CONF_DIR=/usr/local/etc/config
ADDON_DIR=/usr/local/addons/redmatic
WWW_DIR=/usr/local/etc/config/addons/www/redmatic

NODE=$ADDON_DIR/bin/node

SETTINGS=$ADDON_DIR/lib/settings.js
RED_DIR=$ADDON_DIR/lib/node_modules/node-red
RED=$RED_DIR/red.js

LIGHTTPD_CONF=/etc/lighttpd/lighttpd.conf
LIGHTTPD_SSL_CONF=/etc/lighttpd/lighttpd_ssl.conf
BACKUP_CGI=/www/config/cp_security.cgi

export PATH=$ADDON_DIR/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/addons/redmatic/lib:/usr/lib:/usr/local/lib
export GIT_EXEC_PATH=/usr/local/addons/redmatic/libexec/git-core
export NO_UPDATE_NOTIFIER=true

Stop () {
    if [ -f /usr/bin/monit ]; then
        /usr/bin/monit -g redmatic unmonitor
    fi

    PSPID=`ps -o pid,comm,args | awk '{if($3 == "node-red" || $4 ~ /node-red/){print $1}}'`
    if [ "$PSPID" != "" ]; then
        echo -n "Stopping Node-RED: "
        logger -t redmatic -p daemon.info "Stopping Node-RED"

        killall redmaticLoader 2>/dev/null
        kill -SIGINT $PSPID 2>/dev/null
        sleep 2
        if kill -0 $PSPID 2> /dev/null
        then
            sleep 4
            if kill -0 $PSPID 2> /dev/null
            then
                logger -t redmatic -p daemon.warn "Killing Node-RED"
                kill -SIGKILL $PSPID 2>/dev/null
            fi
        fi
        echo "OK"
        logger -t redmatic -p daemon.info "Node-RED stopped"
        return 0
    else
        echo "Node-RED not running"
        return 1
    fi
}

Start () {
    if [ `$ADDON_DIR/bin/jq -r '.ccuBackup' $ADDON_DIR/etc/settings.json` = "full" ]; then
        rm $ADDON_DIR/bin/.nobackup 2>/dev/null
        rm $ADDON_DIR/include/.nobackup 2>/dev/null
        rm $ADDON_DIR/lib/.nobackup 2>/dev/null
        rm $ADDON_DIR/libexec/.nobackup 2>/dev/null
        rm $ADDON_DIR/share/.nobackup 2>/dev/null
        rm $ADDON_DIR/tmp/.nobackup 2>/dev/null
        #rm $ADDON_DIR/var/node_modules/.nobackup 2>/dev/null
        rm $ADDON_DIR/www/.nobackup 2>/dev/null
    else
        touch $ADDON_DIR/bin/.nobackup
        touch $ADDON_DIR/include/.nobackup
        touch $ADDON_DIR/lib/.nobackup
        touch $ADDON_DIR/libexec/.nobackup
        touch $ADDON_DIR/share/.nobackup
        touch $ADDON_DIR/tmp/.nobackup
        #touch $ADDON_DIR/var/node_modules/.nobackup
        touch $ADDON_DIR/www/.nobackup
    fi

    if [ -f $ADDON_DIR/var/do_pkg_upgrade ]; then
        echo "Updating Packages"
        date +"%b %d %H:%M:%S" >> $ADDON_DIR/var/pkg-upgrade.log
        set -o pipefail
        $ADDON_DIR/bin/redmatic-pkg upgrade 2>&1 | tee -a $ADDON_DIR/var/pkg-upgrade.log | logger -t redmatic-pkg -p daemon.info && rm $ADDON_DIR/var/do_pkg_upgrade
        echo "" >> $ADDON_DIR/var/pkg-upgrade.log
        sleep 1
    fi

    if ! grep -Fq "/etc/config/lighttpd/" $LIGHTTPD_CONF
    then
      echo "patching $LIGHTTPD_CONF"
      mount -o remount,rw /
      cp $LIGHTTPD_CONF $LIGHTTPD_CONF.orig
      echo "include_shell \"test -d /etc/config/lighttpd && cat /etc/config/lighttpd/*.conf\"" >> $LIGHTTPD_CONF
      mount -o remount,ro /
      /etc/init.d/S50lighttpd restart
    fi

    if [ -f $LIGHTTPD_SSL_CONF ]
    then
        if ! grep -Fq "/etc/config/lighttpd/" $LIGHTTPD_SSL_CONF
        then
          echo "patching $LIGHTTPD_SSL_CONF"
          mount -o remount,rw /
          cp $LIGHTTPD_SSL_CONF $LIGHTTPD_SSL_CONF.orig
          echo "include_shell \"test -d /etc/config/lighttpd && cat /etc/config/lighttpd/*.conf\"" >> $LIGHTTPD_SSL_CONF
          mount -o remount,ro /
          /etc/init.d/S50lighttpd restart
        fi
    fi

    if ! grep -Fq "exclude-tag=.nobackup" $BACKUP_CGI
    then
        echo "patching $BACKUP_CGI"
        mount -o remount,rw /
        cp $BACKUP_CGI $BACKUP_CGI.orig
        sed "s/exec tar czf \/tmp\/usr_local.tar.gz usr\/local/exec tar --exclude-tag=.nobackup -czf \/tmp\/usr_local.tar.gz usr\/local/" $BACKUP_CGI > $BACKUP_CGI.tmp && mv $BACKUP_CGI.tmp $BACKUP_CGI
        chmod 755 $BACKUP_CGI
        mount -o remount,ro /
    fi

    if [ ! -f /etc/config/rdmtc.uuid ]; then
        /usr/bin/uuidgen > /etc/config/rdmtc.uuid
    fi
    LD_LIBRARY_PATH=/usr/lib:/usr/local/lib:/usr/local/addons/redmatic/lib ; /usr/local/addons/redmatic/bin/redmaticVersions | /usr/bin/curl -H "Content-Type: application/json" -H "X-RedMatic-uuid: `cat /etc/config/rdmtc.uuid`" --data @- -s --max-time 3 https://telemetry.redmatic.de

    PSPID=`ps -o pid,comm,args | awk '{if($3 == "node-red" || $4 ~ /node-red/){print $1}}'`
    if [ "$PSPID" != "" ]; then
        echo "Node-RED already running"
        logger -t redmatic -p daemon.error "cant start - already running"
        exit 1
    else
        upSeconds="$(cat /proc/uptime | grep -o '^[0-9]\+')"
        if [ "${upSeconds}" -lt "120" ]; then
              logger -t redmatic -p daemon.info "Starting Node-RED after reboot ... waiting 30 seconds..."
              echo "Starting Node-RED ... waiting 30 seconds..."
              sleep 30
        fi
        echo -n "Starting Node-RED: "
        source $ADDON_DIR/versions
        logger -t redmatic -p daemon.info "RedMatic v$VERSION_ADDON (c) Sebastian Raff https://github.com/rdmtc/RedMatic"
        start-stop-daemon -S -q -b --exec $ADDON_DIR/bin/redmaticLoader
        echo "OK"
    fi

    if [ -f /usr/bin/monit ]; then
        nohup $ADDON_DIR/bin/monit-start > /dev/null 2>&1 &
    fi
}

case "$1" in

    stop)
        Stop || exit 1
    ;;

    start)
        Start
    ;;

    restart)
        Stop
        sleep 3
        Start
    ;;

    info)
        source $ADDON_DIR/versions
        echo "Info: <div><a target=\"_blank\" href=\"https://github.com/ptweety/RedMatic\"><img src=\"/addons/redmatic/redmatic5-wide.png\" height=\"48\"/></a></div>"
        echo "Name: RedMatic"
        echo "Version: $VERSION_ADDON"
        echo "Update: /addons/redmatic/update_check.cgi"
        echo "Config-Url: /addons/redmatic/settings.cgi"
        echo "Operations: restart uninstall"
    ;;

    uninstall)
        Stop

        $ADDON_DIR/bin/update_addon redmatic
        rm -r $ADDON_DIR
        rm -r $WWW_DIR
        rm $CONF_DIR/lighttpd/redmatic.conf
        rm $CONF_DIR/rc.d/redmatic

        if [ -f /usr/local/etc/monit-redmatic.cfg ]; then
            rm /usr/local/etc/monit-redmatic.cfg
            /usr/bin/monit reload
        fi

        mount -o remount,rw /
        if [ -f $LIGHTTPD_CONF.orig ]; then
            mv $LIGHTTPD_CONF.orig $LIGHTTPD_CONF
        fi
        if [ -f $LIGHTTPD_SSL_CONF.orig ]; then
            mv $LIGHTTPD_SSL_CONF.orig $LIGHTTPD_SSL_CONF
        fi
        if [ -f $BACKUP_CGI.orig ]; then
            mv $BACKUP_CGI.orig $BACKUP_CGI
        fi
        mount -o remount,ro /

        logger -t redmatic -p daemon.info "Uninstalled RedMatic"
    ;;

    *)
        echo "Usage: node-red {start|stop|restart|info|uninstall}" >&2
        exit 1
    ;;

esac

exit 0
