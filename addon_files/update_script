#!/bin/sh

ADDONS_DIR=/usr/local/addons
RED_DIR=$ADDONS_DIR/redmatic
CONF_DIR=/usr/local/etc/config
WWW_DIR=$CONF_DIR/addons/www/redmatic
EXITCODE=10

mount | grep /usr/local 2>&1 >/dev/null
if [ $? -eq 1 ]; then
  mount /usr/local
fi

mkdir -p $ADDONS_DIR && chmod 755 $ADDONS_DIR 
mkdir -p $WWW_DIR && chmod 755 $WWW_DIR
mkdir -p $CONF_DIR/lighttpd && chmod 755 $CONF_DIR/lighttpd

#
#   Stop service on update
#
if [ -f $CONF_DIR/rc.d/redmatic ]; then
    EXITCODE=0
    $CONF_DIR/rc.d/redmatic stop
fi

#
#   Upgrade packages on update
#
if [ -d $RED_DIR/var ]; then
    touch $RED_DIR/var/do_pkg_upgrade
fi

#
#   Rename extra nodes package.json on update
#
if [ -f $RED_DIR/var/package.json ]; then
    mv $RED_DIR/var/package.json $RED_DIR/var/package.json.old
fi

#
#   Delete included modules from lib/node_modules on update
#
if [ -d $RED_DIR/lib/node_modules/node-red ]; then
    rm -r $RED_DIR/lib/node_modules/node-red
fi
if [ -d $RED_DIR/lib/node_modules/npm ]; then
    rm -r $RED_DIR/lib/node_modules/npm
fi
if [ -d $RED_DIR/lib/node_modules/ain2 ]; then
    rm -r $RED_DIR/lib/node_modules/ain2
fi

#
#   Delete lib files on update
#
if [ -d $RED_DIR/lib ]; then
    rm $RED_DIR/lib/lib*
fi

#
#   Install addon files
#
cp -af redmatic $ADDONS_DIR/


#
#   Create default config on first install
#
if [ ! -f $RED_DIR/etc/settings.json ]; then
    mv $RED_DIR/etc/default-settings.json $RED_DIR/etc/settings.json
fi

#
#   Create credentials encryption key
#
if [ ! -f $RED_DIR/etc/credentials.key ]; then
    tr -dc '[:alnum:]' < /dev/urandom  | dd bs=4 count=8 2>/dev/null > $RED_DIR/etc/credentials.key
fi

#
#   Create example flows on first install
#
if [ ! -f $RED_DIR/var/flows.json ]; then
    mv $RED_DIR/var/example-flows.json $RED_DIR/var/flows.json
fi

#
#   export lib path for jq usage
#
export LD_LIBRARY_PATH=$RED_DIR/lib

#
#   Extend extra nodes package.json
#
if [ -f $RED_DIR/var/package.json.old ]; then
    mv $RED_DIR/var/package.json $RED_DIR/var/package.json.new
    $RED_DIR/bin/jq -s '.[0] * .[1]' $RED_DIR/var/package.json.old $RED_DIR/var/package.json.new > $RED_DIR/var/package.json
    rm $RED_DIR/var/package.json.old $RED_DIR/var/package.json.new
fi

#
#   Migration <= 1.9.0 to > 1.9.0
#   Remove Packages that where moved to lib dir
#
if [ -d $RED_DIR/var/node_modules/node-red-node-sqlite ]; then
    rm -r $RED_DIR/var/node_modules/node-red-node-sqlite
    cp $RED_DIR/var/package.json $RED_DIR/var/package.json.bak
    cat $RED_DIR/var/package.json.bak | $RED_DIR/bin/jq 'del(.dependencies."node-red-node-sqlite")' > $RED_DIR/var/package.json
    rm $RED_DIR/var/package.json.bak
fi
if [ -d $RED_DIR/var/node_modules/node-red-node-serialport ]; then
    rm -r $RED_DIR/var/node_modules/node-red-node-serialport
    cp $RED_DIR/var/package.json $RED_DIR/var/package.json.bak
    cat $RED_DIR/var/package.json.bak | $RED_DIR/bin/jq 'del(.dependencies."node-red-node-serialport")' > $RED_DIR/var/package.json
    rm $RED_DIR/var/package.json.bak
fi

#
#   Migration <= 2.6.0 to > 2.6.0
#   Remove Packages that where moved to lib dir
#
if [ -d $RED_DIR/var/node_modules/redmatic-homekit ]; then
    rm -r $RED_DIR/var/node_modules/redmatic-homekit
    cp $RED_DIR/var/package.json $RED_DIR/var/package.json.bak
    cat $RED_DIR/var/package.json.bak | $RED_DIR/bin/jq 'del(.dependencies."redmatic-homekit")' > $RED_DIR/var/package.json
    rm $RED_DIR/var/package.json.bak
fi

#
#   Migration < 5.5 to >= 5.5
#   Remove obsolete theme package
#
if [ -d $RED_DIR/lib/node_modules/node-red-contrib-theme-midnight-red ]; then
    rm -r $RED_DIR/lib/node_modules/node-red-contrib-theme-midnight-red
fi

#
#   Migration <= 7.2.1 to >= 8.0
#   Remove obsolete theme package
#

if [ -d $RED_DIR/lib/node_modules/@node-red-contrib-themes/midnight-red ]; then
    rm -r $RED_DIR/lib/node_modules/@node-red-contrib-themes/midnight-red
fi

#
#   Migration from <= 6.0.2
#   Move npm-cache and exclude from backup
#
if [ -d $RED_DIR/npm-cache ]; then
    mv $RED_DIR/npm-cache $RED_DIR/var/
    touch $RED_DIR/var/npm-cache/.nobackup
fi

#
#   https://github.com/rdmtc/RedMatic/issues/449
#
if [ -d $RED_DIR/lib/node_modules/\ node-red-contrib-harmony-websocket ]; then
    rm -r $RED_DIR/lib/node_modules/\ node-red-contrib-harmony-websocket
fi


#
#   Remove package-lock
#
if [ -f $RED_DIR/var/package-lock.json ]; then
    rm $RED_DIR/var/package-lock.json
fi

#
#   Create Links
#
rmdir $WWW_DIR rmdir $WWW_DIR
ln -sfT $RED_DIR/www $WWW_DIR
ln -sf $RED_DIR/bin/redmatic $CONF_DIR/rc.d/redmatic
ln -sf $RED_DIR/etc/lighttpd.conf $CONF_DIR/lighttpd/redmatic.conf

#
#   Decompress git-core
#
tar -xzf $RED_DIR/libexec/git-core.tar.gz --directory $RED_DIR/libexec/
rm $RED_DIR/libexec/git-core.tar.gz

#
#   Migration: Remove old Buttons (=< v1.0.3)
#
./update_addon node-red
./update_addon node-red-dashboard

#
#   Create Buttons in Homematic WebUI
#
touch $CONF_DIR/hm_addons.cfg
./update_addon redmatic redmatic.cfg

#
#   Link monit configuration
#
if [ -f /usr/bin/monit ]; then
    ln -s $RED_DIR/etc/monit.cfg /usr/local/etc/monit-redmatic.cfg
    /usr/bin/monit reload
fi

sync
exit $EXITCODE
